<%= spec.header %>
update:
  canaries: 1
  max_in_flight: 1
  canary_watch_time: 3000-600000
  update_watch_time: 3000-600000
  serial: false

instance_groups: &instance_groups
<%

var net, net_az_1, net_az_2, net_az_3;
var member_rmq_az_1, member_rmq_az_2, member_rmq_az_3 , member_hp_az_1 , member_hp_az_2;
const members = {};
var azs;

if (!spec.previous_manifest) {
  if ( spec.multi_az_enabled ) {
     net_az_1 = spec.networks[0];
     member_rmq_az_1 = net_az_1.static.slice(0,1);
     net_az_2 = spec.networks[1];
     member_rmq_az_2 = net_az_2.static.slice(0,1);
     net_az_3 = spec.networks[2];
     member_rmq_az_3 = net_az_3.static.slice(0,1);
     members.rabbitmq = member_rmq_az_1.concat(member_rmq_az_2).concat(member_rmq_az_3);
     if ( p('haproxy.instances') )
     {
       member_hp_az_1 = net_az_1.static.slice(1,2);
       member_hp_az_2 = net_az_2.static.slice(1,2);
       members.haproxy = member_hp_az_1.concat(member_hp_az_2);
     }
     else
     {
       members.haproxy = [];
     }
     net = net_az_1;
     azs = '[z1, z2, z3]';
  }
  else
  {
   net = spec.networks[0];
   members.rabbitmq = net.static.slice(0,3) ;
   members.haproxy = net.static.slice(3,3+p('haproxy.instances',0));
   azs = '[z1]';
  }
} else{
  if(spec.previous_manifest.instance_groups){
      /* previous manifest is in v2 schema */
      azs = spec.previous_manifest.instance_groups[0].azs;
    } else {
     /* incase of v1 schema */
     /* Assumption: Existing instance in v1 will be in 1 az */
     azs = '[z1]';
    }
    if ( azs.length == 3)
    {
      net_az_1 = spec.networks[0];
      member_rmq_az_1 = net_az_1.static.slice(0,1);
      net_az_2 = spec.networks[1];
      member_rmq_az_2 = net_az_2.static.slice(0,1);
      net_az_3 = spec.networks[2];
      member_rmq_az_3 = net_az_3.static.slice(0,1);
      members.rabbitmq = member_rmq_az_1.concat(member_rmq_az_2).concat(member_rmq_az_3);

      if ( p('haproxy.instances') )
      {
        member_hp_az_1 = net_az_1.static.slice(1,2);
        member_hp_az_2 = net_az_2.static.slice(1,2);
        members.haproxy = member_hp_az_1.concat(member_hp_az_2);
      }
      else
      {
        members.haproxy = [];
      }
      net = net_az_1;
      azs = '[z1, z2, z3]';
    }
    else if( azs.length == 1){
      net = spec.networks[0];
      members.rabbitmq = net.static.slice(0,3) ;
      members.haproxy = net.static.slice(3,3+p('haproxy.instances',0));
      azs = '[z1]';
    }
}
%>

<%
const stemcell = spec.stemcell;
const properties = {};

if (!spec.previous_manifest) {
  /* create scenario: pick random service instance properties */
  properties.rabbitmq = {
    administrators: {
      broker: {
        username: SecureRandom.hex(16),
        password: SecureRandom.hex(16)
      }
    },
    cookie: SecureRandom.hex(16)
  };
  properties.haproxy = {
    stats: {
      username: SecureRandom.hex(16),
      password: SecureRandom.hex(16)
    }
  };
  properties.plugin = {
    mqtt_enabled: _.get(spec.parameters, 'mqtt_enabled', p('rabbitmq.mqtt_enabled')),
    stomp_enabled: _.get(spec.parameters, 'stomp_enabled', p('rabbitmq.stomp_enabled')),
    amqp1_0_enabled: _.get(spec.parameters, 'stomp_enabled', p('rabbitmq.amqp1_0_enabled'))
  };
} else {
  var new_ip = members.rabbitmq[0];
  var rmq_instance_grp_name = 'rabbitmq';
  var haproxy_instance_grp_name = 'haproxy';
  if(!spec.previous_manifest.instance_groups) {
    /* ensure that the first IP is not changed - clutset will not start otherwise */
    var old_job = spec.previous_manifest.jobs.find((job) => {
      return job.name === `rabbitmq_${net.az}`;
    });
    var old_ip = old_job.networks[0].static_ips[0]
    if (old_ip !== new_ip) {
      throw new Error(`IP addresses must not change! Old IP: ${old_ip}  new ip: ${new_ip}`);
    }
    /* update scenario: preserve previous service instance properties */
    properties.rabbitmq = spec.previous_manifest.properties['rabbitmq-server'];
    properties.haproxy = spec.previous_manifest.properties['rabbitmq-haproxy'];
    properties.plugin = spec.previous_manifest.properties.plugin;
    properties.plugin = {
      mqtt_enabled: _.get(spec.parameters, 'mqtt_enabled', properties.plugin.mqtt_enabled),
      stomp_enabled: _.get(spec.parameters, 'stomp_enabled', properties.plugin.stomp_enabled),
      amqp1_0_enabled: _.get(spec.parameters, 'stomp_enabled', properties.plugin.amqp1_0_enabled)
    };
  } else {
    /* ensure that the first IP is not changed - clutset will not start otherwise */
    var old_rmq_instance_grp = spec.previous_manifest.instance_groups.find((instance) => {
      return instance.name === rmq_instance_grp_name;
    });
    var old_haproxy_instance_grp = spec.previous_manifest.instance_groups.find((instance) => {
      return instance.name === haproxy_instance_grp_name;
    });
    var old_ip = old_rmq_instance_grp.networks[0].static_ips[0]
    if (old_ip !== new_ip) {
      throw new Error(`IP addresses must not change! Old IP: ${old_ip}  new ip: ${new_ip}`);
    }
    /* update scenario: preserve previous service instance properties */
    var old_rmq_server_job = old_rmq_instance_grp.jobs.find((job) => {
      return job.name === 'rabbitmq-server';
    });

    var old_haproxy_job = old_haproxy_instance_grp.jobs.find((job) => {
      return job.name === 'rabbitmq-haproxy';
    });

    var old_agent_job = old_rmq_instance_grp.jobs.find((job) => {
      return job.name === 'broker-agent';
    });

    properties.rabbitmq = old_rmq_server_job.properties['rabbitmq-server'];
    properties.haproxy = old_haproxy_job.properties['rabbitmq-haproxy'];
    if ( old_agent_job.properties.agent === undefined ) {
      properties.plugin = old_agent_job.properties.plugin;
    } else {
      properties.plugin = old_agent_job.properties.agent.plugin;
    }
    properties.plugin = {
      mqtt_enabled: _.get(spec.parameters, 'mqtt_enabled', properties.plugin.mqtt_enabled),
      stomp_enabled: _.get(spec.parameters, 'stomp_enabled', properties.plugin.stomp_enabled),
      amqp1_0_enabled: _.get(spec.parameters, 'stomp_enabled', properties.plugin.amqp1_0_enabled)
    };
  }
}

properties.rabbitmq.static_ips = members.rabbitmq;
if ( members.haproxy.length ) {
  properties.haproxy.static_ips =  members.haproxy;
}
properties.plugin.endpoint_ips = members.haproxy.length ? members.haproxy : members.rabbitmq;

%>
- name: rabbitmq
  migrated_from:
  - name: rabbitmq_z1
    az: z1
  instances: <%= members.rabbitmq.length %>
  networks:
  - name: <%= net.name %>
    static_ips: <%= JSON.stringify(members.rabbitmq) %>
  vm_type: <%= p('rabbitmq.vm_type') %>
  persistent_disk_type: <%= p('rabbitmq.disk_type') %>
  azs: <%= azs %>
  stemcell: <%= stemcell.alias %>
  jobs:
  - name: rabbitmq-server
    release: rabbitmq
    consumes:
      rabbitmq-agent:
        from: brokeragent_rabbitmq
    properties:
      rabbitmq-server:
        plugins:
        - rabbitmq_management
        - rabbitmq_jms_topic_exchange
    <% if (properties.plugin.mqtt_enabled) { %>
        - rabbitmq_mqtt
        - rabbitmq_web_mqtt
    <% } %>
    <% if (properties.plugin.stomp_enabled) { %>
        - rabbitmq_stomp
        - rabbitmq_web_stomp
    <% } %>
    <% if (properties.plugin.amqp1_0_enabled) { %>
        - rabbitmq_amqp1_0
    <% } %>
        administrators:
          management:
            username: <%= properties.rabbitmq.administrators.broker.username %>
            password: <%= properties.rabbitmq.administrators.broker.password %>
          broker:
            username: <%= properties.rabbitmq.administrators.broker.username %>
            password: <%= properties.rabbitmq.administrators.broker.password %>
        cookie: <%= properties.rabbitmq.cookie %>
        static_ips: <%= JSON.stringify(properties.rabbitmq.static_ips) %>
        version: <%= JSON.stringify(p('rabbitmq.version')) %>
        disk_alarm_threshold: "50000000"
      erlang:
        version: <%= JSON.stringify(p('erlang.version')) %>
  - name: broker-agent
    release: broker-agent-rabbitmq
    provides:
      rabbitmq-agent:
        as: brokeragent_rabbitmq
    properties: &agent
      username: <%= JSON.stringify(p('agent.auth.username')) %>
      password: <%= JSON.stringify(p('agent.auth.password')) %>
      plugin:
        vhost_name: production
        endpoint_ips: <%= JSON.stringify(properties.plugin.endpoint_ips) %>
        operator_set_policy:
          enabled: true
          name: "operator_set_policy"
          definition: <%= JSON.stringify(p('rabbitmq.policy_definition')) %>
          priority: 50
        mqtt_enabled:  <%= properties.plugin.mqtt_enabled %>
        stomp_enabled: <%= properties.plugin.stomp_enabled %>
        amqp1_0_enabled: <%= properties.plugin.amqp1_0_enabled %>
      service_agent: &service_agent
        port: 2722
        username: admin
        password: admin
- name: haproxy
  migrated_from:
  - name: haproxy_z1
    az: z1
  instances: <%= members.haproxy.length %>
  networks:
  - name: <%= net.name %>
    static_ips: <%= JSON.stringify(members.haproxy) %>
  vm_type: <%= p('haproxy.vm_type') %>
  persistent_disk_type: <%= p('haproxy.disk_type') %>
  azs: <%= azs %>
  stemcell: <%= stemcell.alias %>
  jobs:
  - name: rabbitmq-haproxy
    release: rabbitmq
    properties:
      rabbitmq-haproxy:
        ports:
        - 5672
    <% if (properties.plugin.mqtt_enabled) { %>
        - 1883
        - 15675
    <% } %>
    <% if (properties.plugin.stomp_enabled) { %>
        - 61613
        - 15674
    <% } %>
        - 15672
        server_ips: <%= JSON.stringify(properties.rabbitmq.static_ips) %>
        stats:
          username: <%= properties.haproxy.stats.username %>
          password: <%= properties.haproxy.stats.password %>
  - name: broker-agent
    release: broker-agent-rabbitmq
    provides:
      rabbitmq-agent:
        as: brokeragent_haproxy
    properties: *agent